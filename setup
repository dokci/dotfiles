#!/bin/sh

echo "\nDotfile Setup\n-------------"
echo "Creating environment variables..."
export DOTFILES=$HOME/dotfiles

# Install Fonts
echo "Checking fonts..."
if [ -d "$HOME/.fonts" ]
then
    echo ".fonts directory already exists, skipping ahead..."
else
    echo "Installing fonts..."
    mkdir -p $HOME/.fonts
    cp -r $DOTFILES/fonts/* $HOME/.fonts
fi

# Install brew formulae
echo "\nUpdating brew..."
brew update
echo "Running brew doctor..."
brew doctor
echo "Installing brew formulae..."
brew install git
brew install hub
brew install node
brew install mysql
brew tap homebrew/binary
brew install packer
brew install pyenv
brew install pyenv-virtualenvwrapper
brew install vim

# Zsh Setup
echo "\nSetting up zsh..."
if [ ! -f "/bin/zsh" ]
then
    while true; do
        read -p "Could not find zsh, do you want to install it via oh-my-zsh? [y/n]" yn
        case $yn in
            [Yy]* ) curl -L http://install.ohmyz.sh | sh
                    chsh -s /bin/zsh
                    source $HOME/.zshrc
                    break;;
            [Nn]* ) break;;
            * ) echo "Please answer yes or no.\n";;
        esac
    done
fi
echo "Setting up Python..."
pyenv install 2.7.6
pyenv shell 2.7.6
echo "Installing Python packages with pip..."
pip install -r $DOTFILES/pip_requirements.txt
if [ -f "$HOME/.zshrc" ]
then
    echo "The .zshrc file already exists, backing it up..."
    cp $HOME/.zshrc $DOTFILES/dotfile_backups/.zshrc_backup
fi
echo "Linking .zshrc..."
ln -sfv $DOTFILES/zsh/.zshrc $HOME/.zshrc

# Vim Setup
echo "/nSetting up vim..."
if [ -f "$HOME/.vimrc" ]
then
    echo "The .vimrc file already exists, backing it up..."
    cp $HOME/.vimrc $DOTFILES/dotfile_backups/.vimrc_backup
fi
echo "Linking .vimrc..."
ln -sfv $DOTFILES/vim/.vimrc $HOME/.vimrc

mkdir -p $HOME/.vim/spell/
ln -sfv $DOTFILES/vim/spell/en.utf-8.spl $HOME/.vim/spell/
echo "Installing vim bundles..."
vim +BundleInstall +qall

source $HOME/.zshrc

# Node Setup
echo "Setting up Node Packages..."
npm install -g bower
npm install -g grunt
npm install -g grunt-cli
npm install -g grunt-contrib-watch
npm install -g grunt-sass
npm install -g node-sass
npm install -g markdown

# Git Setup
echo "/nSetting up git configuration..."
if [ -f "$HOME/.gitconfig" ]
then
    echo "The .gitconfig file already exists, backing it up..."
    cp $HOME/.gitconfig $DOTFILES/dotfile_backups/.gitconfig_backup
fi
echo "Linking .gitconfig..."
ln -sfv $DOTFILES/git/.gitconfig $HOME/.gitconfig
echo "Linking git hooks..."
ln -sfv $DOTFILES/git/git_hooks/post-merge $DOTFILES/.git/hooks/post-merge

echo "\nInitial Git Setup\n-----------------"
while true; do
    echo "The current git user is $(git config --global user.name) <$(git config --global user.email)>."
    read -p "Do you wish specify the git user right now? [y/n] " yn
    case $yn in
        [Yy]* ) echo
                read -p "What is the git user name? [First Last] " name
                git config --global user.name "$name"
                echo
                read -p "What is the git user email? " email
                git config --global user.email "$email"
                break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.\n";;
    esac
done

# Mac Preference Setup
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "\nDarwin OS found, setting preferences..."
    defaults write -g ApplePressAndHoldEnabled -bool false
    defaults write -g KeyRepeat -int 1
    defaults write -g InitialKeyReapt 1.5
    chflags nohidden $HOME/Library/
    defaults write com.apple.Dock autohide-delay -float 0
    defaults write com.apple.dock expose-animation-duration -float 0.1
    killall Dock
fi
