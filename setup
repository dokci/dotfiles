#!/bin/sh

echo "\nDotfile Setup\n-------------"
echo "Creating environment variables..."
export DOTFILES=$HOME/dotfiles

# Install Fonts
echo "Checking fonts..."
if [ -d "$HOME/.fonts" ]
then
    echo ".fonts directory already exists, skipping ahead..."
else
    echo "Installing fonts..."
    mkdir -p $HOME/.fonts
    cp -r $DOTFILES/fonts/* $HOME/.fonts
fi

# Install brew formulae
echo "Installing brew formulae..."
brew install git packer python python3 vim

# Zsh Setup
echo "\nSetting up zsh..."
if [ ! -f "/bin/zsh" ]
then
    while true; do
        read -p "Could not find zsh, do you want to install it? [y/n]" yn
        case $yn in
            [Yy]* ) curl -L http://install.ohmyz.sh | sh
                    chsh -s /bin/zsh
                    source $HOME/.zshrc
                    break;;
            [Nn]* ) break;;
            * ) echo "Please answer yes or no.\n";;
        esac
    done
fi
echo "Installing python packages with pip..."
pip install -r $DOTFILES/requirements.txt
if [ -f "$HOME/.zshrc" ]
then
    echo "The .zshrc file already exists, backing it up..."
    cp $HOME/.zshrc $DOTFILES/dotfile_backups/.zshrc_backup
fi
echo "Linking .zshrc..."
ln -sfv $DOTFILES/zsh/.zshrc $HOME/.zshrc  

# Vim Setup
echo "/nSetting up vim..."
if [ -f "$HOME/.vimrc" ]
then
    echo "The .vimrc file already exists, backing it up..."
    cp $HOME/.vimrc $DOTFILES/dotfile_backups/.vimrc_backup
fi
echo "Linking .vimrc..."
ln -sfv $DOTFILES/vim/.vimrc $HOME/.vimrc

mkdir -p $HOME/.vim/spell/
ln -sfv $DOTFILES/vim/spell/en.utf-8.spl $HOME/.vim/spell/
echo "Installing vim bundles..."
vim +BundleInstall +qall

# Git Setup
echo "/nSetting up git configuration..."
if [ -f "$HOME/.gitconfig" ]
then
    echo "The .gitconfig file already exists, backing it up..."
    cp $HOME/.gitconfig $DOTFILES/dotfile_backups/.gitconfig_backup
fi
echo "Linking .gitconfig..."
ln -sfv $DOTFILES/git/.gitconfig $HOME/.gitconfig

echo "Linking git_find_replace_author script, so it can be used with shell..."
ln -sfv $DOTFILES/git/git_find_replace_author /usr/local/bin/git_find_replace_author

if [ -f "$HOME/.gitignore_global" ]
then
    echo "The .gitignore_global file already exists, backing it up..."
    cp $HOME/.gitignore_global $DOTFILES/dotfile_backups/.gitignore_global_backup
fi
echo "Linking .gitignore_global..."
ln -sfv $DOTFILES/git/.gitignore_global $HOME/.gitignore_global
git config --global core.excludesfile $HOME/.gitignore_global

echo "\nInitial Git Setup\n-----------------"
while true; do
    echo "The default git user is a placeholder."
    read -p "Do you wish specify the git user right now? [y/n]" yn
    case $yn in
        [Yy]* ) echo
                read -p "What is the git user name? [First Last] " name
                git config --global user.name "$name"
                echo
                read -p "What is the git user email? " email
                git config --global user.email "$email"
                break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.\n";;
    esac
done

# Mac Preference Setup
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "\nDarwin OS found, setting preferences..."
    defaults write -g ApplePressAndHoldEnabled -bool false
    defaults write -g KeyRepeat .01
    defualts write -g InitialKeyReapt 1.5
    chflags nohidden $HOME/Library/
    defaults write com.apple.Dock autohide-delay -float 0
    defaults write com.apple.dock expose-animation-duration -float 0.1
    killall Dock
fi
